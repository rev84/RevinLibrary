// Generated by CoffeeScript 1.10.0
var Utl;

Utl = (function() {
  function Utl() {}

  Utl.numFormat = function(num) {
    return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  };

  Utl.rand = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  Utl.adrBar = function(url) {
    return window.history.replaceState('', '', '' + url);
  };

  Utl.time = function() {
    return Math.floor(+new Date() / 1000);
  };

  Utl.getDateStr = function(date) {
    if (date == null) {
      date = null;
    }
    if (date === null) {
      date = new Date();
    }
    return '' + this.zerofill(date.getFullYear(), 4) + '/' + this.zerofill(date.getMonth() + 1, 2) + '/' + this.zerofill(date.getDate(), 2);
  };

  Utl.getDatetimeStr = function(date) {
    if (date == null) {
      date = null;
    }
    if (date === null) {
      date = new Date();
    }
    return this.getDateStr(date) + ' ' + this.zerofill(date.getHours(), 2) + ':' + this.zerofill(date.getMinutes(), 2) + ':' + this.zerofill(date.getSeconds(), 2);
  };

  Utl.zerofill = function(num, digit) {
    return ('' + this.repeat('0', digit) + num).slice(-digit);
  };

  Utl.repeat = function(str, times) {
    return Array(1 + times).join(str);
  };

  Utl.shuffle = function(ary) {
    var i, n, ref;
    n = ary.length;
    while (n) {
      n--;
      i = this.rand(0, n);
      ref = [ary[n], ary[i]], ary[i] = ref[0], ary[n] = ref[1];
    }
    return ary;
  };

  Utl.inArray = function(needle, ary) {
    var j, len, v;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (v === needle) {
        return true;
      }
    }
    return false;
  };

  Utl.clone = function(ary) {
    var j, k, len, res, v;
    res = [];
    for (k = j = 0, len = ary.length; j < len; k = ++j) {
      v = ary[k];
      res[k] = v;
    }
    return res;
  };

  return Utl;

})();
