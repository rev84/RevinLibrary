// Generated by CoffeeScript 1.10.0
var UtlTest;

window.tests = {
  Utl: {
    numFormat: [1000, 500, 1234567890, -123456789],
    rand: [[1, 10], [1, 100], [5, 30], [-5, 5]],
    adrBar: ['/=====', 'yeah', 'test.js'],
    getDateStr: [['null', null], ['new Date(0)', new Date(0)]],
    getDatetimeStr: [['null', null], ['new Date(0)', new Date(0)]],
    zerofill: [[1, 5], [100, 4], [100, 10]],
    time: [null],
    inArray: [[1, [1, 2, 3, 4, 5]], ['a', [1, 2, 3, 4, 5, 'a']], ['b', [1, 2, 3, 4, 5, 'a']], [1, []], [null, [0, 1, 2, 3]]],
    clone: [[1, 2, 3, 4, 5]],
    shuffle: [[1, 2, 3, 4, 5], ['a', 'b', 'c', 'd', 'e'], [1, 1, 1, 2, 3]]
  }
};

UtlTest = (function() {
  function UtlTest() {}

  UtlTest.rand = function(before) {
    var after, i, j, max, min;
    min = before[0], max = before[1];
    after = [];
    for (i = j = 0; j < 10; i = ++j) {
      after.push(Utl.rand(min, max));
    }
    return ['min:' + min + ', max:' + max, after.join(', ')];
  };

  UtlTest.adrBar = function(before) {
    return [before, '<button onclick="Utl.adrBar(\'' + before + '\')">変更</button>' + '<button onclick="Utl.adrBar(\'RevinLibrary/test/\')">戻す</button>'];
  };

  UtlTest.zerofill = function(before) {
    var digit, num;
    num = before[0], digit = before[1];
    return ['num:' + num + ', digit:' + digit, Utl.zerofill(num, digit)];
  };

  UtlTest.repeat = function(before) {
    var str, times;
    str = before[0], times = before[1];
    return ['str:' + str + ', times:' + times, Utl.repeat(str, times)];
  };

  UtlTest.getDateStr = function(before) {
    var beforeStr, ref;
    ref = before, beforeStr = ref[0], before = ref[1];
    return [beforeStr, Utl.getDateStr(before)];
  };

  UtlTest.getDatetimeStr = function(before) {
    var beforeStr, ref;
    ref = before, beforeStr = ref[0], before = ref[1];
    return [beforeStr, Utl.getDatetimeStr(before)];
  };

  UtlTest.inArray = function(ary) {
    var array, needle;
    needle = ary[0], array = ary[1];
    return ['needle: ' + needle + ', array:' + '[' + array.toString() + ']', Utl.inArray(needle, array) ? 'true' : 'false'];
  };

  UtlTest.clone = function(before) {
    return ['[' + before.toString() + ']', '[' + Utl.clone(before).toString() + ']'];
  };

  UtlTest.shuffle = function(before) {
    return ['[' + before.toString() + ']', '[' + Utl.shuffle(before).toString() + ']'];
  };

  return UtlTest;

})();

$().ready(function() {
  var after, before, c, caseDiv, cases, className, funcFullName, funcName, funcs, ref, results;
  ref = window.tests;
  results = [];
  for (className in ref) {
    funcs = ref[className];
    results.push((function() {
      var j, len, ref1, results1;
      results1 = [];
      for (funcName in funcs) {
        cases = funcs[funcName];
        funcFullName = className + '.' + funcName;
        caseDiv = $('<div>').attr('id', funcFullName).append($('<h1>').attr('name', funcFullName).html(funcFullName));
        $('#index ul').append($('<li>').html('<a href="#' + funcFullName + '">' + funcFullName + '</a>'));
        for (j = 0, len = cases.length; j < len; j++) {
          c = cases[j];
          if (UtlTest[funcName] != null) {
            ref1 = UtlTest[funcName](c), before = ref1[0], after = ref1[1];
          } else {
            before = c;
            after = Utl[funcName](before);
          }
          caseDiv.append($('<div>').addClass('case').append($('<span>').addClass('before').html(before)).append($('<div>').addClass('after').html(after)));
        }
        results1.push($('#tests').append(caseDiv));
      }
      return results1;
    })());
  }
  return results;
});
